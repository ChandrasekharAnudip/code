Encaptulation
	Mixture of fields and methods.
	
	Data Binding
	
	
	
	class
		fields
		methods

class Account {
	private int acc_id;
	private String name;
	
	public void setAccountID(int acc_id) {
		this.acc_id = acc_id;
	}
	
	
}


balance = 10000;
amount = 14000;

balance = balance - amount;

balance = 10000 - 14000
        = -4000

Abstraction
	We know there is something.
	We dont know what is that?

1. abstract  classes === > 0%  to 100% abstraction

	1. abstract method ==> the method without the body.
	
	2. if a class is defined with atleast one abstract method, that class can be called as an abstract class.
	
	3. We should not create any object for an abstract class. 
	
	4. Abstract class must be a base class.
	
	5. There must be atleast one derived class for an abstract class.
	
	6. In derived class(es) we must overide the abstract method(s) of the abstract class.
	
	
	

2. interfaces ===> 100% abstraction



sh1.draw();

public abstract class Shape {
	.
	.
	.
	.
	
	public abstract void area();
	
	public void hello() {
		s.o.p("Hello");
	}

}


Shape s = new Shape(); ==> this is an error because we cannot create object for abstract class.

s.hello();

s.area(); 

class Circle extends Shape {

	.
	.
	.
	.
	
	@Overide
	public void area() {
		double area = Math.PI * r * r;
	}
}

class Rectangle extends Shape {

	.
	.
	.
	.
	
	@Overide
	public void area() {
		double area = l * w;
	}
}


=============================
Overloading
	Same method with different parameters(no of parameters and type of parameters)
	
	Compiler takes care about method overloading.

	If count of parameters is same, then type of parameters should be changed. 

	You can write overloading methods inside the same class, or in derived class.
	
	It is static polymarphism.
	
	
	
	public class Calculator {
		public int add(int n1, int n2) { // 2 parameters
			return n1 + n2;
		}
		
		public int add(int n1, int n2, int n3) { // 3 parameters
			return n1 + n2 + n3;
		}
		
		public double add(double n1, double n2) { // 2 			
									parameters , type is double
		return n1 + n2;
	}
		
		p.v.s.m(..) {
			Calculator c1 = new Calculator();
			
			s.o.p("Sum = " + c1.add(10,20));
			s.o.p("Sum = " + c1.add(10,20,30));
		}
	}
	
	
	
Overriding
	If the method with same parameters, again if you write in derived class, then it is called overriding a method.
	
	Use  @Override to specify that you are overriding a method.
	
	Method in base class only you can override in derived class.
	
	It is dynamic polymarphism.
	




===============================

Use of this keyword

Use of super keyword

Static Binding

Dynamic Binding

=======================


Boxing and un-boxing


Garbage Collection and Finalize

Finalize

Difference between final, finally and finalize

======================================================

